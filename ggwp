1 and 11(cube of a number) 
John has a problem of finding the square of a number. He contacts the server and sends the number.Server computes the result and returns back to the client.Implement this scenario using a connection oriented approach.

Server c

#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/fcntl.h>
#include <unistd.h>
#include <netdb.h>
#define MAX_INPUT_SIZE 256
int main(int argc, char *argv[])
{
  	int fd,sockfd, newsockfd, clilen,portno,n,flag;
  	struct sockaddr_in serv_addr,cli_addr;
  	char buffer[MAX_INPUT_SIZE];
  	if(argc<2)
  	{
          	fprintf(stderr," no port\n");
          	exit(1);
 	}
  	portno=atoi(argv[1]);
  	sockfd=socket(AF_INET, SOCK_STREAM,0);
  	if(sockfd<0)
    {    
 			 perror("error opening socket");
   	 exit(1);
    } 	 
    bzero((char*)&serv_addr,sizeof(serv_addr));
  	serv_addr.sin_family=AF_INET;
  	serv_addr.sin_addr.s_addr=(htonl)INADDR_ANY;
  	serv_addr.sin_port=htons(portno);
  	if(bind(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr))<0)
  	{perror("error binding");
	 exit(0);
    }
 
  	if(listen(sockfd,4)<0)
    {
   	 perror("listen");
   	 exit(1);
    }  
    
  	clilen=sizeof(serv_addr);
     	newsockfd = accept(sockfd,(struct sockaddr *)&cli_addr,(socklen_t*)&clilen);
          	if(newsockfd<0)
          	{perror("error on accept");
   	 exit(1);   	 
   	 }
		 else{
   		 printf("Connected with client socket number: %d \n",newsockfd);   	 
   	 }
  	bzero(buffer,MAX_INPUT_SIZE) ;
  	while(read(newsockfd,buffer,sizeof(buffer)))  
  	{
         	 
         	 
        	 
      	 
         	printf("Client socket %d sent message: %s",newsockfd,buffer);
         	char ci="";
          	int num1=0,j,d=0;
     	for(int i=0;i<strlen(buffer)-1;i++)
    	{
   	 num1=(10*num1)+(buffer[i]-'0');
   	 
   		 
    	}
       	 
       	 
      int result;
        	 
      result=num1*num1;    
     	printf("sending reply:%i\n",result);
     	bzero(buffer,MAX_INPUT_SIZE) ;
     	sprintf(buffer,"%d",result);
     	send(newsockfd , buffer, strlen(buffer),0);
     	bzero(buffer,MAX_INPUT_SIZE) ;
       	 
     	 
  	}
  	if(read(newsockfd,buffer,sizeof(buffer))<=0)
  	printf("client disconnected........\n");
 	 
  	close(newsockfd);
  	return 0;
}
 









Client.c

#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/fcntl.h>
#include <unistd.h>
#include <netdb.h>

#define MAX_INPUT_SIZE 256

int main(int argc, char *argv[])
{
    int sockfd, portnum, n;
    struct sockaddr_in server_addr;

    char inputbuf[MAX_INPUT_SIZE];
    if (argc < 3)
    {
   	 fprintf(stderr,"usage %s <server-ip-addr> <server-port>\n", argv[0]);
   	 exit(0);
    }

    portnum = atoi(argv[2]);

/* Create client socket */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
   	 fprintf(stderr, "ERROR opening socket\n"); exit(1);
    }

/* Fill in server address */
    bzero((char *) &server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    if(!inet_aton(argv[1], &server_addr.sin_addr))
    {
   	 fprintf(stderr, "ERROR invalid server IP address\n"); exit(1);
    }
    server_addr.sin_port = htons(portnum);
    
/* Connect to server */
    

    if (connect(sockfd,(struct sockaddr *)&server_addr,sizeof(server_addr))<0)
    {
   	 fprintf(stderr, "ERROR connecting\n"); exit(1);
	 }
    printf("Connected to server\n");

    do
    {
/* Ask user for message to send to server */
   	 printf("Please enter the message to the server: ");
   	 bzero(inputbuf,MAX_INPUT_SIZE);
   	 fgets(inputbuf,MAX_INPUT_SIZE-1,stdin);

    /* Write to server */
   	 n = write(sockfd,inputbuf,strlen(inputbuf));
   	 if (n < 0)
   	 {    
   		 fprintf(stderr, "ERROR writing to socket\n"); exit(1);
   	 }

/* Read reply */
   	 bzero(inputbuf,MAX_INPUT_SIZE);
   	 n = read(sockfd,inputbuf,(MAX_INPUT_SIZE-1));
   	 if (n < 0)
   	 {
   		 fprintf(stderr, "ERROR reading from socket\n"); exit(1);
   	 }
   	 printf("Server replied: %s\n",inputbuf);

    } while(1);

return 0;
}

gcc server.c
./a.out 8082


gcc client.c
./a.out 10.0.2.4 808
2 & 7)  Implement client and server programs in C for connection oriented communication between server and client process using Linux domain sockets to perform the following: Client process sends a message to the server process. The server receives the message, reverses it and sends it back to the client. The client will then display the message to the standard output device.

Server.c

// Server C code to reverse a
// string by sent from client
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 8090

// Driver code
int main()
{
	int server_fd, new_socket, valread;
	struct sockaddr_in address;
	char str[100];
	int addrlen = sizeof(address);
	char buffer[1024] = { 0 };
	char* hello = "Hello from server";

	// Creating socket file descriptor
	if ((server_fd = socket(AF_INET,
						SOCK_STREAM, 0)) == 0) {
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons(PORT);

	// Forcefully attaching socket to
	// the port 8090
	if (bind(server_fd, (struct sockaddr*)&address,
						sizeof(address)) < 0) {
		perror("bind failed");
		exit(EXIT_FAILURE);
	}

	// puts the server socket in passive mode
	if (listen(server_fd, 3) < 0) {
		perror("listen");
		exit(EXIT_FAILURE);
	}
	if ((new_socket = accept(server_fd,
				(struct sockaddr*)&address,
				(socklen_t*)&addrlen)) < 0) {
		perror("accept");
		exit(EXIT_FAILURE);
	}

	// read string send by client
	valread = read(new_socket, str,
				sizeof(str));
	int i, j, temp;
	int l = strlen(str);

	printf("\nString sent by client:%s\n", str);

	// loop to reverse the string
	for (i = 0, j = l - 1; i < j; i++, j--) {
		temp = str[i];
		str[i] = str[j];
		str[j] = temp;
	}

	// send reversed string to client
	// by send system call
	send(new_socket, str, sizeof(str), 0);
	printf("\nModified string sent to client\n");

	return 0;
}




Client.c

// C client code to send string to reverse
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 8090

// Driver code
int main()
{
	struct sockaddr_in address;
	int sock = 0, valread;
	struct sockaddr_in serv_addr;
	char str[100];

	printf("\nInput the string:");
	scanf("%[^\n]s", str);

	char buffer[1024] = { 0 };

	// Creating socket file descriptor
	if ((sock = socket(AF_INET,
					SOCK_STREAM, 0))
		< 0) {
		printf("\n Socket creation error \n");
		return -1;
	}

	memset(&serv_addr, '0', sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(PORT);

	// Convert IPv4 and IPv6 addresses from
	// text to binary form 127.0.0.1 is local
	// host IP address, this address should be
	// your system local host IP address
	if (inet_pton(AF_INET, "127.0.0.1",
				&serv_addr.sin_addr)
		<= 0) {
		printf("\nAddress not supported \n");
		return -1;
	}

	// connect the socket
	if (connect(sock, (struct sockaddr*)&serv_addr,
				sizeof(serv_addr))
		< 0) {
		printf("\nConnection Failed \n");
		return -1;
	}

	int l = strlen(str);

	// send string to server side
	send(sock, str, sizeof(str), 0);

	// read string sent by server
	valread = read(sock, str, l);

	printf("%s\n", str);

	return 0;
}


gcc client.c
./a.out 
Gcc server.c
./a.out




4.  Create a server which runs continuously, and if any client hits the server with a request then the server will send its date and time. Implement this with connection-Oriented Iterative Server using user-defined ports.

Server.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <time.h>

#define BACKLOG 10

int main(int argc, char **argv){
  if(argc != 2){
    printf("Usage: %s <port>\n", argv[0]);
    exit(0);
  }

  int port = atoi(argv[1]);
  printf("Port: %d\n", port);

  int n_client = 0;
  int sockfd = socket(AF_INET, SOCK_STREAM, 0);
  struct sockaddr_in serverAddress;
  serverAddress.sin_family = AF_INET;
  serverAddress.sin_addr.s_addr = INADDR_ANY;
  serverAddress.sin_port = htons(port);

  bind(sockfd, (struct sockaddr*)&serverAddress, sizeof(serverAddress));
  printf("[+]Bind\n");

  listen(sockfd, BACKLOG);
  printf("[+]Listening for the client\n");

  int i = 1;
  while(i){
    int client_socket = accept(sockfd, NULL, NULL);
    n_client++;
    time_t currentTime;
    time(&currentTime);
    printf("Client %d requested for time at %s", n_client, ctime(&currentTime));
    send(client_socket, ctime(&currentTime), 30, 0);
  }

  return 0;

}




Client.c


#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <time.h>

int main(int argc, char **argv){
  if(argc != 2){
    printf("Usage: %s <port>\n", argv[0]);
    exit(0);
  }

  int port = atoi(argv[1]);
  printf("Port: %d\n", port);

  int sockfd = socket(AF_INET, SOCK_STREAM, 0);
  char response[30];
  struct sockaddr_in serverAddress;
  serverAddress.sin_family = AF_INET;
  serverAddress.sin_addr.s_addr = INADDR_ANY;
  serverAddress.sin_port = htons(port);

  connect(sockfd, (struct sockaddr*)&serverAddress, sizeof(serverAddress));
  printf("[+]Connected to the server\n");

  recv(sockfd, response, 29, 0);
  printf("Time from server: %s", response);

  return 0;

}
gcc client.c      gcc server.c
          ./a.out 8082
 




5.  Create a server which runs continuously, and if any client hits the server with a request then the server will send its date and time. Implement this with connectionless Iterative Server using user-defined ports.

Client.c

#include <sys/socket.h>
#include <netdb.h>
#include <string.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#define S_PORT 43454
#define C_PORT 43455
#define ERROR -1
#define IP_STR "127.0.0.1"

int main(int argc, char const *argv[]) {
	int sfd;
	int num = 1;
	time_t start_time, rtt, current_time;
	struct sockaddr_in servaddr, clientaddr;
	socklen_t addrlen;
	sfd = socket(AF_INET, SOCK_DGRAM,IPPROTO_UDP);
	if (sfd == ERROR) {
		perror("Could not open a socket");
		return 1;
	}
	memset((char *) &servaddr, 0, sizeof(servaddr));
	servaddr.sin_family=AF_INET;
	servaddr.sin_addr.s_addr=inet_addr(IP_STR);
	servaddr.sin_port=htons(S_PORT);

	memset((char *) &clientaddr, 0, sizeof(clientaddr));
	clientaddr.sin_family=AF_INET;
	clientaddr.sin_addr.s_addr=inet_addr(IP_STR);
	clientaddr.sin_port=htons(C_PORT);

	if((bind(sfd,(struct sockaddr *)&clientaddr,sizeof(clientaddr)))!=0) {
		perror("Could not bind socket");
		return 2;
	}

	printf("Client is running on %s:%d\n", IP_STR, C_PORT);
	start_time = time(NULL);
	sendto(sfd, &num, sizeof(num), 0, (struct sockaddr *)&servaddr, sizeof(servaddr));
	addrlen = sizeof(clientaddr);
	recvfrom(sfd, &current_time, sizeof(current_time), 0, (struct sockaddr *)&clientaddr, &addrlen);
	rtt = time(NULL) - start_time;
	current_time += rtt / 2;
	printf("Server's Time: %s\n", ctime(&current_time));

	return 0;
}


Server.c

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <time.h>

#define S_PORT 43454
#define C_PORT 43455
#define ERROR -1
#define IP_STR "127.0.0.1"

int main(int argc, char const *argv[]) {
	int sfd, num;
	time_t current_time;
	struct sockaddr_in servaddr, clientaddr;
	sfd = socket(AF_INET, SOCK_DGRAM,IPPROTO_UDP);
	if (sfd == ERROR) {
		perror("Could not open a socket");
		return 1;
	}
	memset((char *) &servaddr, 0, sizeof(servaddr));
	servaddr.sin_family=AF_INET;
	servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
	servaddr.sin_port=htons(S_PORT);

	memset((char *) &clientaddr, 0, sizeof(clientaddr));
	clientaddr.sin_family=AF_INET;
	clientaddr.sin_addr.s_addr=inet_addr(IP_STR);
	clientaddr.sin_port=htons(C_PORT);

	if((bind(sfd,(struct sockaddr *)&servaddr,sizeof(servaddr)))!=0) {
		perror("Could not bind socket");
		return 2;
	}

	printf("Server is running on %s:%d\n", IP_STR, S_PORT);
	while(1) {
		recvfrom(sfd, &num, sizeof(num), 0, (struct sockaddr *)&clientaddr, (socklen_t *)&clientaddr);
		current_time = time(NULL);
		printf("Client at %s:%d asked for time: %s\n", inet_ntoa(clientaddr.sin_addr), ntohs(clientaddr.sin_port), ctime(&current_time));
		sendto(sfd, &current_time, sizeof(current_time), 0, (struct sockaddr *)&clientaddr, sizeof(clientaddr));
	}

	return 0;
}



	





// 6. Implement a program for connection-oriented Iterative service in which the server changes the case of the strings sent by the client and sent back (Case Server) to the client.

client.c

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main(){
  int clientSocket, portNum, nBytes;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  socklen_t addr_size;

  clientSocket = socket(PF_INET, SOCK_STREAM, 0);

  portNum = 7891;

  serverAddr.sin_family = AF_INET;
  serverAddr.sin_port = htons(portNum);
  serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);  

  addr_size = sizeof serverAddr;
  connect(clientSocket, (struct sockaddr *) &serverAddr, addr_size);

  while(1){
	printf("Type a sentence to send to server:\n");
	fgets(buffer,1024,stdin);
	printf("You typed: %s",buffer);

	nBytes = strlen(buffer) + 1;

	send(clientSocket,buffer,nBytes,0);

	recv(clientSocket, buffer, 1024, 0);

	printf("Received from server: %s\n\n",buffer);   
  }

  return 0;
}


Server.c

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>

int main(){
  int welcomeSocket, newSocket, portNum, clientLen, nBytes;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  struct sockaddr_storage serverStorage;
  socklen_t addr_size;
  int i;

  welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);

  portNum = 7891;
 
  serverAddr.sin_family = AF_INET;
  serverAddr.sin_port = htons(portNum);
  serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);  

  bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

  if(listen(welcomeSocket,5)==0)
	printf("Listening\n");
  else
	printf("Error\n");

  addr_size = sizeof serverStorage;

  /*loop to keep accepting new connections*/
  while(1){
	newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);
	/*fork a child process to handle the new connection*/
	if(!fork()){
  	nBytes = 1;
  	/*loop while connection is live*/
  	while(nBytes!=0){
    	nBytes = recv(newSocket,buffer,1024,0);
 
    	for (i=0;i<nBytes-1;i++){
      	buffer[i] = toupper(buffer[i]);
    	}

    	send(newSocket,buffer,nBytes,0);
  	}
  	close(newSocket);
  	exit(0);
	}
	/*if parent, close the socket and go back to listening new requests*/
	else{
  	close(newSocket);
	}
  }

  return 0;
}




 Multiple clients requesting a single server.
10.The server opens a passive socket and listens for connection requests from clients. Implement
a simple server: it accepts at most one connection request. Once a client connects, the server
sends the message "you are connected to the server!" to the client and shuts down.
Same as 10th (without multiple client)

Client.c 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 1818

int main(){

	int clientSocket, ret;
	struct sockaddr_in serverAddr;
	char buffer[8024];

	clientSocket = socket(AF_INET, SOCK_STREAM, 0);
	if(clientSocket < 0){
		printf("Error in connection.\n");
		exit(1);
	}
	printf("Client Socket is created.\n");

	memset(&serverAddr, '\0', sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(PORT);
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

	ret = connect(clientSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if(ret < 0){
		printf("Error in connection.\n");
		exit(1);
	}
	printf("Connected to Server.\n");

	while(1)
	{
		printf("Client: \t");
		scanf("%s", &buffer[0]);
		send(clientSocket, buffer, strlen(buffer), 0);

		if(strcmp(buffer, "exit") == 0)
		{
			close(clientSocket);
			printf("Disconnected from server.\n");
			exit(1);
		}

		if(recv(clientSocket, buffer, 1024, 0) < 0){
			printf("Error in receiving data.\n");
		}else{
			printf("from Server to client :%s\n", buffer);
		}
	}

	return 0;
}
Server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 1818

int main(){

	int sockfd, ret;
	 struct sockaddr_in serverAddr;

	int newSocket;
	struct sockaddr_in newAddr;

	socklen_t addr_size;

	char buffer[8024];
	pid_t childpid;

	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if(sockfd < 0){
		printf("Error in connection.\n");
		exit(1);
	}
	printf("Server Socket is created.\n");

	memset(&serverAddr, '\0', sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(PORT);
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

	ret = bind(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if(ret < 0){
		printf("[-]Error in binding.\n");
		exit(1);
	}
	printf("Bind to port %d\n", 1818);

	if(listen(sockfd, 10) == 0){
		printf("Listening....\n");
	}
	else
	{
		printf("Error in binding.\n");
	}


	while(1)
	{
		newSocket = accept(sockfd, (struct sockaddr*)&newAddr, &addr_size);
		if(newSocket < 0){
			exit(1);
		}
		printf("Connection accepted from %s:%d\n", inet_ntoa(newAddr.sin_addr), ntohs(newAddr.sin_port));

		if((childpid = fork()) == 0)
		{
			close(sockfd);

			while(1){
				recv(newSocket, buffer, 1024, 0);
				if(strcmp(buffer, ":exit") == 0){
					printf("Disconnected from %s:%d\n", inet_ntoa(newAddr.sin_addr), ntohs(newAddr.sin_port));
					break;
				}else{
					printf("Client %s:%d to Server: %s\n",inet_ntoa(newAddr.sin_addr), ntohs(newAddr.sin_port), buffer);
					send(newSocket, buffer, strlen(buffer), 0);
					bzero(buffer, sizeof(buffer));
				}
			}
		}

	}

	close(newSocket);


	return 0;
}
 
12. Jack wants to find the total salary for this current month that the employer has paid.He sends his basic salary to the server.Server adds HRA, PF, other benefits and sends back the result to the client(Jack).Implement this scenario using appropriate approach.
 
 
Server.c
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/fcntl.h>
#include <unistd.h>
#include <netdb.h>
#define MAX_INPUT_SIZE 256
int main(int argc, char *argv[])
{
  	int fd,sockfd, newsockfd, clilen,portno,n,flag;
  	struct sockaddr_in serv_addr,cli_addr;
  	char buffer[MAX_INPUT_SIZE];
  	if(argc<2)
  	{
          	fprintf(stderr," no port\n");
          	exit(1);
 	}
  	portno=atoi(argv[1]);
  	sockfd=socket(AF_INET, SOCK_STREAM,0);
  	if(sockfd<0)
    {    
 			 perror("error opening socket");
   	 exit(1);
    } 	 
    bzero((char*)&serv_addr,sizeof(serv_addr));
  	serv_addr.sin_family=AF_INET;
  	serv_addr.sin_addr.s_addr=(htonl)INADDR_ANY;
  	serv_addr.sin_port=htons(portno);
  	if(bind(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr))<0)
  	{perror("error binding");
	 exit(0);
    }
 
  	if(listen(sockfd,4)<0)
    {
   	 perror("listen");
   	 exit(1);
    }  
    
  	clilen=sizeof(serv_addr);
     	newsockfd = accept(sockfd,(struct sockaddr *)&cli_addr,(socklen_t*)&clilen);
          	if(newsockfd<0)
          	{perror("error on accept");
   	 exit(1);   	 
   	 }
		 else{
   		 printf("Connected with client socket number: %d \n",newsockfd);   	 
   	 }
  	bzero(buffer,MAX_INPUT_SIZE) ;
  	while(read(newsockfd,buffer,sizeof(buffer)))  
  	{
         	 
         	 
        	 
      	 
         	printf("Client socket %d sent message: %s",newsockfd,buffer);
         	char ci="";
          	int num1=0,j,d=0;
     	for(int i=0;i<strlen(buffer)-1;i++)
    	{
   	 num1=(10*num1)+(buffer[i]-'0');
   	 
   		 
    	}
       	 
       	 
         	int result;
        	 int hra=100;
   		 result=num1*0.4 +hra ;   
     	printf("sending reply:%i\n",result);
     	bzero(buffer,MAX_INPUT_SIZE) ;
     	sprintf(buffer,"%d",result);
     	send(newsockfd , buffer, strlen(buffer),0);
     	bzero(buffer,MAX_INPUT_SIZE) ;
       	 
     	 
  	}
  	if(read(newsockfd,buffer,sizeof(buffer))<=0)
  	printf("client disconnected........\n");
 	 
  	close(newsockfd);
  	return 0;
}
 
Client.c
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/fcntl.h>
#include <unistd.h>
#include <netdb.h>
 
#define MAX_INPUT_SIZE 256
 
int main(int argc, char *argv[])
{
    int sockfd, portnum, n;
    struct sockaddr_in server_addr;
 
    char inputbuf[MAX_INPUT_SIZE];
    if (argc < 3)
    {
   	 fprintf(stderr,"usage %s <server-ip-addr> <server-port>\n", argv[0]);
   	 exit(0);
    }
 
    portnum = atoi(argv[2]);
 
/* Create client socket */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
   	 fprintf(stderr, "ERROR opening socket\n"); exit(1);
    }
 
/* Fill in server address */
    bzero((char *) &server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    if(!inet_aton(argv[1], &server_addr.sin_addr))
    {
   	 fprintf(stderr, "ERROR invalid server IP address\n"); exit(1);
    }
    server_addr.sin_port = htons(portnum);
    
/* Connect to server */
    
 
    if (connect(sockfd,(struct sockaddr *)&server_addr,sizeof(server_addr))<0)
    {
   	 fprintf(stderr, "ERROR connecting\n"); exit(1);
	 }
    printf("Connected to server\n");
 
    do
    {
/* Ask user for message to send to server */
   	 printf("Please enter the message to the server: ");
   	 bzero(inputbuf,MAX_INPUT_SIZE);
   	 fgets(inputbuf,MAX_INPUT_SIZE-1,stdin);
 
    /* Write to server */
   	 n = write(sockfd,inputbuf,strlen(inputbuf));
   	 if (n < 0)
   	 {    
   		 fprintf(stderr, "ERROR writing to socket\n"); exit(1);
   	 }
 
/* Read reply */
   	 bzero(inputbuf,MAX_INPUT_SIZE);
   	 n = read(sockfd,inputbuf,(MAX_INPUT_SIZE-1));
   	 if (n < 0)
   	 {
   		 fprintf(stderr, "ERROR reading from socket\n"); exit(1);
   	 }
   	 printf("Server replied: %s\n",inputbuf);
 
    } while(1);
 
return 0;
}
 
 
 
13. File transfer
C program for file Transfer using UDP - GeeksforGeeks
 
14. Sort
https://www.geeksforgeeks.org/sort-array-using-socket-programming/

https://www.geeksforgeeks.org/c-program-for-file-transfer-using-udp/


18.Johny has an integer array to be sorted.He sends the array to server.Implement the server which sorts an array using socket programming. 

https://www.geeksforgeeks.org/sort-array-using-socket-programming/


 8.Usually the TCP header and IP header are added by the operating system.Demonstrate how you can add IP header and tcp header manually using raw sockets.
https://inc0x0.com/tcp-ip-packets-introduction/tcp-ip-packets-3-manually-create-and-send-raw-tcp-ip-packets/


9.Usually networks are prone for attacks.Generate the flood attacks to the server by using raw sockets. 
https://www.binarytides.com/python-syn-flood-program-raw-sockets-linux/


25.David is the father of Jack and he is 25 year elder to his son.Jack is now 40 years old.Jack’s
system is not able to do computations, hence he requests the server to send his father’s age by
doing computations.Implement the client to send the Jack’s age and server responds with
father’s age.
//server
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/fcntl.h>
#include <unistd.h>
#include <netdb.h>
#define MAX_INPUT_SIZE 256
int main(int argc, char *argv[])
{
  	int fd,sockfd, newsockfd, clilen,portno,n,flag;
  	struct sockaddr_in serv_addr,cli_addr;
  	char buffer[MAX_INPUT_SIZE];
  	if(argc<2)
  	{
          	fprintf(stderr," no port\n");
          	exit(1);
 	}
  	portno=atoi(argv[1]);
  	sockfd=socket(AF_INET, SOCK_STREAM,0);
  	if(sockfd<0)
	{    
          	perror("error opening socket");
    	exit(1);
	} 	 
	bzero((char*)&serv_addr,sizeof(serv_addr));
  	serv_addr.sin_family=AF_INET;
  	serv_addr.sin_addr.s_addr=(htonl)INADDR_ANY;
  	serv_addr.sin_port=htons(portno);
  	if(bind(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr))<0)
  	{perror("error binding");
 	exit(0);
	}
 
  	if(listen(sockfd,4)<0)
	{
    	perror("listen");
    	exit(1);
	}  
    
  	clilen=sizeof(serv_addr);
     	newsockfd = accept(sockfd,(struct sockaddr *)&cli_addr,(socklen_t*)&clilen);
          	if(newsockfd<0)
          	{perror("error on accept");
    	exit(1);   	 
    	}
     	else{
        	printf("Connected with client socket number: %d \n",newsockfd);   	 
    	}
  	bzero(buffer,MAX_INPUT_SIZE) ;
  	while(read(newsockfd,buffer,sizeof(buffer)))  
  	{
         	 
         	 
        	 
      	 
         	printf("Client socket %d sent message: %s",newsockfd,buffer);
         	char ci="";
          	int num1=0,j,d=0;
     	for(int i=0;i<strlen(buffer)-1;i++)
    	{
    	num1=(10*num1)+(buffer[i]-'0');
   	 
       	 
    	}
       	 
       	 
  	int result;
        	 
  	result=num1+25;    
     	printf("sending reply:%i\n",result);
     	bzero(buffer,MAX_INPUT_SIZE) ;
     	sprintf(buffer,"%d",result);
     	send(newsockfd , buffer, strlen(buffer),0);
     	bzero(buffer,MAX_INPUT_SIZE) ;
       	 
     	 
  	}
  	if(read(newsockfd,buffer,sizeof(buffer))<=0)
  	printf("client disconnected........\n");
 	 
  	close(newsockfd);
  	return 0;
}


//CLIENT
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/fcntl.h>
#include <unistd.h>
#include <netdb.h>

#define MAX_INPUT_SIZE 256

int main(int argc, char *argv[])
{
	int sockfd, portnum, n;
	struct sockaddr_in server_addr;

	char inputbuf[MAX_INPUT_SIZE];
	if (argc < 3)
	{
  	  fprintf(stderr,"usage %s <server-ip-addr> <server-port>\n", argv[0]);
  	  exit(0);
	}

	portnum = atoi(argv[2]);

/* Create client socket */
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0)
	{
  	  fprintf(stderr, "ERROR opening socket\n"); exit(1);
	}

/* Fill in server address */
	bzero((char *) &server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	if(!inet_aton(argv[1], &server_addr.sin_addr))
	{
  	  fprintf(stderr, "ERROR invalid server IP address\n"); exit(1);
	}
	server_addr.sin_port = htons(portnum);
    
/* Connect to server */
    

	if (connect(sockfd,(struct sockaddr *)&server_addr,sizeof(server_addr))<0)
	{
  	  fprintf(stderr, "ERROR connecting\n"); exit(1);
     }
	printf("Connected to server\n");

	do
	{
/* Ask user for message to send to server */
  	  printf("Jack Age: ");
  	  bzero(inputbuf,MAX_INPUT_SIZE);
  	  fgets(inputbuf,MAX_INPUT_SIZE-1,stdin);

	/* Write to server */
  	  n = write(sockfd,inputbuf,strlen(inputbuf));
  	  if (n < 0)
  	  {    
  		  fprintf(stderr, "ERROR writing to socket\n"); exit(1);
  	  }

/* Read reply */
  	  bzero(inputbuf,MAX_INPUT_SIZE);
  	  n = read(sockfd,inputbuf,(MAX_INPUT_SIZE-1));
  	  if (n < 0)
  	  {
  		  fprintf(stderr, "ERROR reading from socket\n"); exit(1);
  	  }
  	  printf("David Age: %s\n",inputbuf);

	} while(1);

return 0;
}
